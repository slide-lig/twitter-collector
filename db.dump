
SET client_min_messages TO WARNING;

--
-- Name: languages; Type: TABLE; Schema: public; Owner: twitter; Tablespace: 
--

CREATE TABLE languages (
    lang_id SERIAL PRIMARY KEY,
    lang_str text UNIQUE
);


--
-- Name: user_stats; Type: TABLE; Schema: public; Owner: twitter; Tablespace: 
--

CREATE TABLE user_stats (
    user_stats_id BIGSERIAL PRIMARY KEY,
    followers_count integer,
    statuses_count integer,
    friends_count integer,
    favourites_count integer
);


--
-- Name: twitter_user; Type: TABLE; Schema: public; Owner: twitter; Tablespace: 
--

CREATE TABLE twitter_user (
    user_id bigint PRIMARY KEY,
    utc_offset integer,
    location text,
    created_at timestamp with time zone,
    first_seen_at timestamp with time zone,
    lang_id integer REFERENCES languages(lang_id),
    stats_first_seen bigint UNIQUE REFERENCES user_stats(user_stats_id),
    stats_now bigint UNIQUE REFERENCES user_stats(user_stats_id)
);


--
-- Name: collector; Type: TABLE; Schema: public; Owner: twitter; Tablespace: 
--

CREATE TABLE collector (
    collector_id serial PRIMARY KEY,
    description text
);

CREATE TABLE place(
    place_id bigint primary key,
    place_type text,
    place_name text,
    place_bbox geometry,
    place_bbox_valid geometry
);
CREATE INDEX ON place USING gist (place_bbox_valid);

--
-- Name: tweet; Type: TABLE; Schema: public; Owner: twitter; Tablespace: 
--

CREATE TABLE tweet (
    tweet_id bigint PRIMARY KEY,
    user_id bigint REFERENCES twitter_user(user_id),
    text text,
    created_at timestamp with time zone,
    captured_at timestamp with time zone,
    user_tweet_num integer,
    saved_at timestamp with time zone,
    gps geometry(Point,4326),
    collector_id integer references collector(collector_id),
    lang_id integer references languages(lang_id),
    place_id bigint references place(place_id)
);

CREATE INDEX ON tweet (created_at);
CREATE INDEX tweet_gps_idx ON tweet USING gist (gps);

CREATE TABLE stats_per_period(
    period_id serial primary key, 
    last_period_id int references stats_per_period(period_id), 
    end_of_period timestamp with time zone,
    num_tweets_emitted bigint,
    num_tweets_captured bigint
);

INSERT INTO stats_per_period(
            last_period_id, end_of_period, num_tweets_emitted,
                num_tweets_captured)
            VALUES (null, current_timestamp, 0, 0);

CREATE TABLE hashtags(
    hashtag_id serial PRIMARY KEY, 
    name text UNIQUE
);

CREATE TABLE tweet_hashtag(
    tweet_id bigint REFERENCES tweet(tweet_id), 
    hashtag_id integer REFERENCES hashtags(hashtag_id)
);
CREATE INDEX ON tweet_hashtag(hashtag_id);
CREATE INDEX ON tweet_hashtag(tweet_id);

--
-- Meta-programming part.
-- With postgresql it is not easy to implement
-- insert-if-not-exist features handling concurrency.
-- we create a meta-function that will be able to
-- generate the code of these insert-if-not-exist functions.
--

CREATE OR REPLACE FUNCTION declare_get_or_insert_function(
    func_name TEXT,
    func_params_with_types TEXT,
    in_table TEXT,
    search_filter TEXT,
    insert_query TEXT
    ) RETURNS TEXT AS
$$
BEGIN
    -- we create a table containing no records (see LIMIT 0)
    -- what we want is to refer to its column names and types later.
    -- columns are the same as table in_table plus a boolean is_new
    -- that allows to know if the row was just inserted or not. 
    EXECUTE format($FORMAT_STR$
        DROP TABLE IF EXISTS __internal_%s_type_desc CASCADE;
        CREATE TABLE __internal_%s_type_desc AS 
            SELECT *, TRUE as is_new from %I LIMIT 0;
    $FORMAT_STR$, 
    func_name,
    func_name, in_table);

    EXECUTE format($FORMAT_STR$
        DROP FUNCTION IF EXISTS %s(%s);
        CREATE OR REPLACE FUNCTION %s(%s, OUT res __internal_%s_type_desc)
        AS $DYN_FUNC$
        BEGIN
            LOOP
            -- try to get any existing value
            SELECT *, FALSE INTO res FROM %I WHERE %s;
            IF found THEN
                EXIT;  -- exit loop
            END IF;
            -- not there, so try to insert the value
            -- if someone else inserts the same concurrently,
            -- we could get a unique-key failure
            BEGIN
                %s RETURNING *, TRUE INTO res;
                EXIT;  -- exit loop
            EXCEPTION WHEN unique_violation THEN
                -- Do nothing, and loop to try the SELECT again.
            END;
            END LOOP;
        END
        $DYN_FUNC$
        LANGUAGE plpgsql;
    $FORMAT_STR$, 
    func_name, func_params_with_types,
    func_name, func_params_with_types, func_name, 
    in_table, search_filter, 
    insert_query);

    RETURN func_name;
END
$$ LANGUAGE plpgsql;

-- we now use declare_get_or_insert_function()
-- to create the following functions:
-- getHashtag(), getLanguage(), getOrInsertUser()
-- getOrInsertTweet()

SELECT declare_get_or_insert_function(
        'getHashtag',
        'in_name TEXT',
        'hashtags',
        'name = in_name',
        'INSERT INTO hashtags(name) VALUES (in_name)');

SELECT declare_get_or_insert_function(
        'getLanguage',
        'in_lang_str TEXT',
        'languages',
        'lang_str = in_lang_str',
        'INSERT INTO languages(lang_str) VALUES (in_lang_str)');

SELECT declare_get_or_insert_function(
        'getOrInsertUser',
        $PARAMS$
        in_user_id BIGINT, in_user_utc_offset INTEGER, in_user_location TEXT, 
        in_user_created_at TIMESTAMP WITH TIME ZONE, in_user_lang_str TEXT
        $PARAMS$,
        'twitter_user',
        'user_id = in_user_id',
        $INSERT_QUERY$
        INSERT INTO twitter_user(user_id, utc_offset, location, created_at,
                            first_seen_at, lang_id)
            VALUES (in_user_id, in_user_utc_offset, in_user_location,
             in_user_created_at, now(), (getLanguage(in_user_lang_str)).lang_id)
        $INSERT_QUERY$);

SELECT declare_get_or_insert_function(
        'getOrInsertPlace',
        $PARAMS$
        in_place_id BIGINT, in_place_type TEXT,
        in_place_name TEXT, in_place_bbox TEXT,
        in_place_bbox_valid TEXT
        $PARAMS$,
        'place',
        'place_id = in_place_id',
        $INSERT_QUERY$
        INSERT INTO place(place_id, place_type, place_name, place_bbox)
            VALUES (in_place_id, in_place_type, in_place_name,
                    ST_SetSRID(ST_GeomFromGeoJSON(in_place_bbox), 4326))
        $INSERT_QUERY$);

SELECT declare_get_or_insert_function(
        'getOrInsertTweetv2',
        $PARAMS$
        in_tweet_id BIGINT, in_user_id BIGINT, in_text TEXT,
        in_latitude DOUBLE PRECISION, in_longitude DOUBLE PRECISION,
        in_created_at TIMESTAMP WITH TIME ZONE, in_captured_at TIMESTAMP WITH TIME ZONE,
        in_user_statuses_count INTEGER, in_collector_id INTEGER, in_lang_str TEXT,
        in_place_id BIGINT
        $PARAMS$,
        'tweet',
        'tweet_id = in_tweet_id',
        $INSERT_QUERY$
        INSERT INTO tweet(tweet_id, user_id, text, gps, created_at, captured_at, 
                           saved_at, user_tweet_num, collector_id, lang_id, place_id)
            VALUES (in_tweet_id, in_user_id, in_text,
                    ST_SetSRID(ST_MakePoint(in_longitude, in_latitude),4326),
                    in_created_at, in_captured_at, now(),
                    in_user_statuses_count, in_collector_id,
                    (getLanguage(in_lang_str)).lang_id,
                    in_place_id)
        $INSERT_QUERY$);

-- we have one more subfunction to parse the tweet
-- and find hashtags

CREATE OR REPLACE FUNCTION hashtag_matches(text)
RETURNS TABLE (hashtag text)
LANGUAGE SQL
AS $$
    SELECT lower(unnest(regexp_matches($1, E'#([[:alnum:]]+)', 'g')));
$$
;

-- and here comes the main function that will be called from the
-- collector each time we capture a tweet.
CREATE OR REPLACE FUNCTION registerTweetAndMetadata(
        in_tweet_id BIGINT, in_user_id BIGINT, in_text TEXT, 
        in_latitude DOUBLE PRECISION, in_longitude DOUBLE PRECISION, 
        in_created_at TIMESTAMP WITH TIME ZONE, 
        in_captured_at TIMESTAMP WITH TIME ZONE, 
        in_lang_str TEXT, in_user_utc_offset INTEGER, 
        in_user_location TEXT, in_user_created_at TIMESTAMP WITH TIME ZONE, 
        in_user_followers_count INTEGER, in_user_statuses_count INTEGER, 
        in_user_friends_count INTEGER, in_user_favourites_count INTEGER, 
        in_user_lang_str TEXT,
        in_place_id BIGINT, in_place_type TEXT,
        in_place_name TEXT, in_place_bbox TEXT,
        in_collector_id INTEGER) RETURNS VOID AS
$$
DECLARE
    user_is_new boolean;
    tweet_is_new boolean;
    user_stats_id_now BIGINT;
    user_stats_id_first_seen BIGINT;
    
BEGIN
    -- retrieve or insert user profile data
    SELECT INTO user_is_new, user_stats_id_now 
        is_new, stats_now
    FROM getOrInsertUser(in_user_id, in_user_utc_offset, in_user_location,
                 in_user_created_at, in_user_lang_str);

    IF user_is_new THEN
        -- first time we see this user
        -- insert 2 records in table user_stats,
        -- one for stats_first_seen (initial stats) 
        -- and one for stats_now (running stats updated
        -- at each tweet)
        INSERT INTO user_stats(followers_count, statuses_count,
                            friends_count, favourites_count) 
            VALUES (in_user_followers_count, in_user_statuses_count,
                in_user_friends_count, in_user_favourites_count)
            RETURNING user_stats_id INTO user_stats_id_first_seen;
        INSERT INTO user_stats(followers_count, statuses_count,
                            friends_count, favourites_count) 
            VALUES (in_user_followers_count, in_user_statuses_count,
                in_user_friends_count, in_user_favourites_count)
            RETURNING user_stats_id INTO user_stats_id_now;
        UPDATE twitter_user
            SET stats_first_seen = user_stats_id_first_seen,
                stats_now = user_stats_id_now
            WHERE user_id = in_user_id;
    ELSE
        -- just check that the creation of stats objects was done
        IF user_stats_id_now IS NOT NULL THEN
            -- ok, update running stats of this user
            UPDATE user_stats 
                SET followers_count = in_user_followers_count, 
                    statuses_count = in_user_statuses_count, 
                    friends_count = in_user_friends_count, 
                    favourites_count = in_user_favourites_count 
                WHERE user_stats_id = user_stats_id_now;
        END IF;
    END IF;

    -- record the place data if seen for the 1st time
    IF in_place_id IS NOT NULL THEN
        PERFORM getOrInsertPlace(in_place_id, in_place_type,
                                 in_place_name, in_place_bbox, NULL);
    END IF;

    -- record the tweet itself and associated metadata
    SELECT INTO tweet_is_new
        (getOrInsertTweetv2(
            in_tweet_id, in_user_id, in_text,
            in_latitude, in_longitude, 
            in_created_at, in_captured_at,
            in_user_statuses_count, in_collector_id,
            in_lang_str, in_place_id)).is_new;
    IF tweet_is_new THEN
        -- compute and record hashtags
        INSERT INTO tweet_hashtag(tweet_id, hashtag_id)
            SELECT in_tweet_id, (getHashtag(hashtag_matches(in_text))).hashtag_id;
    END IF; 
END
$$ LANGUAGE plpgsql;

