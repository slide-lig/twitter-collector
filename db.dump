
CREATE OR REPLACE FUNCTION hashtag_matches(text)
RETURNS TABLE (hashtag text)
LANGUAGE SQL
AS $$
    SELECT lower(unnest(regexp_matches($1, E'#([[:alnum:]]+)', 'g')));
$$
;

CREATE OR REPLACE FUNCTION record_hashtags(bigint, text)
RETURNS void
LANGUAGE SQL
AS $$
    WITH cur_q AS (
            SELECT hashtag, hashtag_id 
            FROM hashtag_matches($2) AS m 
            LEFT JOIN hashtags ON m.hashtag = hashtags.name),
         ins_q AS (
            INSERT INTO hashtags(name) 
                (SELECT hashtag 
                 FROM cur_q
                 WHERE hashtag_id IS NULL)
            RETURNING *)
    INSERT INTO tweet_hashtag(tweet_id, hashtag_id)
        (SELECT $1, greatest(cur_q.hashtag_id, ins_q.hashtag_id)
    FROM cur_q 
    LEFT JOIN ins_q ON cur_q.hashtag = ins_q.name);
$$
;

--
-- Name: registerOneTweet(...)
--

CREATE FUNCTION getLangID(in_lang_str TEXT) RETURNS INTEGER AS
$$
DECLARE
    result_lang_id INTEGER;
BEGIN
    SELECT lang_id INTO result_lang_id FROM languages WHERE lang_str = in_lang_str;
	IF NOT FOUND THEN
        -- first time we see this language, register it
        BEGIN
            INSERT INTO languages(lang_str) VALUES (in_lang_str) 
                    RETURNING lang_id INTO result_lang_id;
        EXCEPTION WHEN unique_violation THEN
            -- apparently a concurrent worker was faster than us at inserting this
            SELECT lang_id INTO result_lang_id FROM languages WHERE lang_str = in_lang_str;
        END;
	END IF;
    RETURN result_lang_id;
END
$$ LANGUAGE plpgsql;

CREATE FUNCTION registerOneTweet(in_tweet_id BIGINT, in_user_id BIGINT, in_text TEXT, in_latitude DOUBLE PRECISION, in_longitude DOUBLE PRECISION, in_created_at TIMESTAMP WITH TIME ZONE, in_captured_at TIMESTAMP WITH TIME ZONE, in_lang_str TEXT, in_user_utc_offset INTEGER, in_user_location TEXT, in_user_created_at TIMESTAMP WITH TIME ZONE, in_user_followers_count INTEGER, in_user_statuses_count INTEGER, in_user_friends_count INTEGER, in_user_favourites_count INTEGER, in_user_lang_str TEXT, in_collector_id INTEGER) RETURNS VOID AS
$$
DECLARE
    user_stats_id_now BIGINT;
    user_stats_id_first_seen BIGINT;
    
BEGIN
    -- retrieve stats_now of current user
    SELECT stats_now INTO user_stats_id_now FROM twitter_user WHERE user_id = in_user_id;
	IF NOT FOUND THEN
        -- first time we see this user
        -- insert 2 records in table user_stats, one for stats_first_seen (initial stats) 
        -- and one for stats_now (running stats updated at each tweet)
        INSERT INTO user_stats(followers_count, statuses_count, friends_count, favourites_count) 
                VALUES (in_user_followers_count, in_user_statuses_count, in_user_friends_count, in_user_favourites_count)
                RETURNING user_stats_id INTO user_stats_id_first_seen;
        INSERT INTO user_stats(followers_count, statuses_count, friends_count, favourites_count) 
                VALUES (in_user_followers_count, in_user_statuses_count, in_user_friends_count, in_user_favourites_count)
                RETURNING user_stats_id INTO user_stats_id_now;
        -- insert the user
		INSERT INTO twitter_user(user_id, utc_offset, location, created_at, first_seen_at, lang_id, stats_first_seen, stats_now) 
                VALUES (in_user_id, in_user_utc_offset, in_user_location, in_user_created_at, now(), getLangID(in_user_lang_str), user_stats_id_first_seen, user_stats_id_now);
	ELSE 
        -- update running stats of this user
		UPDATE user_stats 
                SET followers_count = in_user_followers_count, 
                    statuses_count = in_user_statuses_count, 
                    friends_count = in_user_friends_count, 
                    favourites_count = in_user_favourites_count 
                WHERE user_stats_id = user_stats_id_now;
    END IF;

    -- it seems twitter API may report twice the same tweet sometimes.
    IF NOT EXISTS (SELECT 1 FROM tweet where tweet_id = in_tweet_id) THEN
        INSERT INTO tweet(tweet_id, user_id, text, gps, created_at, captured_at, saved_at, user_tweet_num, collector_id, lang_id)   
            VALUES (in_tweet_id, in_user_id, in_text, ST_SetSRID(ST_MakePoint(in_longitude, in_latitude),4326), in_created_at, in_captured_at, now(), in_user_statuses_count, in_collector_id, getLangID(in_lang_str));
    END IF;
END
$$ LANGUAGE plpgsql;


--
-- Name: languages; Type: TABLE; Schema: public; Owner: twitter; Tablespace: 
--

CREATE TABLE languages (
    lang_id SERIAL PRIMARY KEY,
    lang_str text UNIQUE
);


--
-- Name: user_stats; Type: TABLE; Schema: public; Owner: twitter; Tablespace: 
--

CREATE TABLE user_stats (
    user_stats_id BIGSERIAL PRIMARY KEY,
    followers_count integer,
    statuses_count integer,
    friends_count integer,
    favourites_count integer
);


--
-- Name: twitter_user; Type: TABLE; Schema: public; Owner: twitter; Tablespace: 
--

CREATE TABLE twitter_user (
    user_id bigint PRIMARY KEY,
    utc_offset integer,
    location text,
    created_at timestamp with time zone,
    first_seen_at timestamp with time zone,
    lang_id integer REFERENCES languages(lang_id),
    stats_first_seen bigint UNIQUE REFERENCES user_stats(user_stats_id),
    stats_now bigint UNIQUE REFERENCES user_stats(user_stats_id)
);


--
-- Name: collector; Type: TABLE; Schema: public; Owner: twitter; Tablespace: 
--

CREATE TABLE collector (
    collector_id serial PRIMARY KEY,
    description text
);

--
-- Name: tweet; Type: TABLE; Schema: public; Owner: twitter; Tablespace: 
--

CREATE TABLE tweet (
    tweet_id bigint PRIMARY KEY,
    user_id bigint REFERENCES twitter_user(user_id),
    text text,
    created_at timestamp with time zone,
    captured_at timestamp with time zone,
    user_tweet_num integer,
    saved_at timestamp with time zone,
    gps geometry(Point,4326)
    collector_id integer references collector(collector_id);
    lang_id integer references languages(lang_id);
);

CREATE INDEX ON tweet (created_at);
CREATE INDEX tweet_gps_idx ON tweet USING gist (gps);

CREATE TABLE stats_per_period(
    period_id serial primary key, 
    last_period_id int references stats_per_period(period_id), 
    end_of_period timestamp with time zone,
    num_tweets_emitted bigint,
    num_tweets_captured bigint
);

INSERT INTO stats_per_period(
            last_period_id, end_of_period, num_tweets_emitted, num_tweets_captured)
            VALUES (null, current_timestamp, 0, 0);

CREATE TABLE hashtags(
    hashtag_id serial PRIMARY KEY, 
    name text UNIQUE
);

CREATE TABLE tweet_hashtag(
    tweet_id bigint REFERENCES tweet(tweet_id), 
    hashtag_id integer REFERENCES hashtags(hashtag_id)
);
CREATE INDEX ON tweet_hashtag(hashtag_id);

--
-- PostgreSQL database dump complete
--

